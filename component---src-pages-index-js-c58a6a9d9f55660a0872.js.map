{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","data","location","useState","activeCategory","setActiveCategory","background","title","cardInfo","setCardInfo","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","filter","node","frontmatter","category","backgroundImage","updateActiveCategory","el","document","querySelector","classList","add","setTimeout","remove","finishCardInfo","description","ogImage","image","length","className","map","fields","slug","key","onMouseOver","card","updateCardInfo","style","marginLeft","marginRight","width","rhythm","maxWidth","to","subtitle","excerpt","date","pageQuery"],"mappings":"2FAAA,0HA4GeA,UArGG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EAEEC,mBAAS,MAA9CC,EAFmC,KAEnBC,EAFmB,OAGVF,mBAAS,CACrCG,WAAY,KACZC,MAAO,KAFJC,EAHmC,KAGzBC,EAHyB,KAkClCC,EAAYT,EAAKU,KAAKC,aAAaL,MACrCM,EAAQZ,EAAKa,kBAAkBC,MAAMC,QAAO,YAAa,IAAXC,EAAU,EAAVA,KAChD,OAAsB,OAAnBb,GAA8C,SAAnBA,GAEvBa,EAAKC,YAAYC,WAAaf,KAGvC,OACE,kBAAC,IAAD,CACEF,SAAUA,EACVK,MAAOG,EACPU,gBAAiBZ,EAAWA,EAASF,WAAa,KAClDF,eAAgBA,EAChBiB,qBAvByB,SAACF,GAC5B,IAAMG,EAAKC,SAASC,cAAc,qBAClCF,EAAGG,UAAUC,IAAI,UACjBC,YAAW,WACTtB,EAAkBc,GAClBG,EAAGG,UAAUG,OAAO,YACnB,MAkBDC,eA7BmB,WACVN,SAASC,cAAc,oBAC/BC,UAAUG,OAAO,YA6BlB,kBAAC,IAAD,CACErB,MAAOI,KAAKC,aAAaL,MACzBuB,YAAanB,KAAKC,aAAakB,YAC/BC,QAASpB,KAAKC,aAAaoB,SAG1BnB,EAAMoB,QACP,yBAAKC,UAAU,aAAf,eACc,6BADd,gBAIDrB,EAAMsB,KAAI,YAAe,IAAZlB,EAAW,EAAXA,KACNV,EAAQU,EAAKC,YAAYX,OAASU,EAAKmB,OAAOC,KACpD,OACE,6BACEC,IAAKrB,EAAKmB,OAAOC,KACjBH,UAAU,WACVK,YAAa,kBA3DA,SAACC,GACtB,GAAGA,EAAKlC,aAAeE,EAASF,YAAckC,EAAKjC,QAAUC,EAASD,MAAtE,CAEA,GAAGiC,EAAKlC,aAAeE,EAASF,WACnBiB,SAASC,cAAc,oBAC/BC,UAAUC,IAAI,UAEnBC,YAAW,kBAAIlB,EAAY+B,KAAO,MAoDTC,CAAexB,EAAKC,eAErC,yBAAKgB,UAAU,UAAUQ,MAAO,CAC5BC,WAAW,OACXC,YAAY,OACZC,MAAOC,YAAO,IACdC,SAAU,SAEZ,gCACE,4BAAI,kBAAC,OAAD,CAAMC,GAAI/B,EAAKmB,OAAOC,MACvB9B,KAGL,6BAAS2B,UAAS,aAAc1B,EAASD,QAAUU,EAAKC,YAAYX,MAAQ,eAAiB,KAC3F,kBAAC,OAAD,CAAMyC,GAAI/B,EAAKmB,OAAOC,MACnBpB,EAAKC,YAAY+B,UAAYhC,EAAKiC,WAIzC,yBAAKhB,UAAU,gBAAgBQ,MAAO,CAClCC,WAAW,OACXC,YAAY,OACZG,SAAUD,YAAO,OAErB,yBAAKZ,UAAS,kBAAmB1B,EAASD,QAAUU,EAAKC,YAAYX,MAAQ,gBAAkB,KAC5FU,EAAKC,YAAYiC,YAWzB,IAAMC,EAAS","file":"component---src-pages-index-js-c58a6a9d9f55660a0872.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n\r\n  let [activeCategory, setActiveCategory] = useState(null);\r\n  let [cardInfo, setCardInfo] = useState({\r\n    background: null,\r\n    title: '',\r\n  });\r\n\r\n  const updateCardInfo = (card) => {\r\n    if(card.background === cardInfo.background && card.title === cardInfo.title)\r\n      return;\r\n    if(card.background !== cardInfo.background) {\r\n      const el = document.querySelector('.backgroundImage');\r\n      el.classList.add('hidden');\r\n    }\r\n    setTimeout(()=>setCardInfo(card), 200);\r\n    //setTimeout(()=> el.classList.remove('hidden'), 500);\r\n  }\r\n\r\n  const finishCardInfo = () => {\r\n    const el = document.querySelector('.backgroundImage');\r\n    el.classList.remove('hidden');\r\n  }\r\n\r\n  const updateActiveCategory = (category) => {\r\n    const el = document.querySelector('#opacityContainer');\r\n    el.classList.add('hidden');\r\n    setTimeout(()=> {\r\n      setActiveCategory(category);\r\n      el.classList.remove('hidden');\r\n    }, 200\r\n    );\r\n  }\r\n  \r\n  const siteTitle = data.site.siteMetadata.title;\r\n  let posts = data.allMarkdownRemark.edges.filter(({node}) => {\r\n    if(activeCategory === null || activeCategory === 'home')\r\n      return true;\r\n    return node.frontmatter.category === activeCategory\r\n  });\r\n\r\n  return (\r\n    <Layout\r\n      location={location}\r\n      title={siteTitle}\r\n      backgroundImage={cardInfo ? cardInfo.background : null}\r\n      activeCategory={activeCategory}\r\n      updateActiveCategory={updateActiveCategory}\r\n      finishCardInfo={finishCardInfo}\r\n    >\r\n      <SEO\r\n        title={site.siteMetadata.title}\r\n        description={site.siteMetadata.description}\r\n        ogImage={site.siteMetadata.image}\r\n      />\r\n      {\r\n        !posts.length &&\r\n        <div className=\"noContent\">\r\n          Square zero.<br/>Nothing yet.\r\n        </div>\r\n      }\r\n      {posts.map(({ node }) => {\r\n        const title = node.frontmatter.title || node.fields.slug\r\n        return (\r\n          <article\r\n            key={node.fields.slug}\r\n            className=\"homeCard\"\r\n            onMouseOver={()=>updateCardInfo(node.frontmatter)}\r\n          >\r\n            <div className=\"content\" style={{\r\n                marginLeft: `auto`,\r\n                marginRight: `auto`,\r\n                width: rhythm(48),\r\n                maxWidth: '100%',\r\n              }}>\r\n              <header>\r\n                <h3><Link to={node.fields.slug}>\r\n                  {title}\r\n                </Link></h3>\r\n              </header>\r\n              <section className={`subtitle ${cardInfo.title === node.frontmatter.title ? 'showSubtitle' : ''}`}>\r\n                <Link to={node.fields.slug}>\r\n                  {node.frontmatter.subtitle || node.excerpt}\r\n                </Link>\r\n              </section>\r\n            </div>\r\n            <div className=\"cardSeparator\" style={{\r\n                marginLeft: `auto`,\r\n                marginRight: `auto`,\r\n                maxWidth: rhythm(48),\r\n              }}></div>\r\n            <div className={`date homeDate ${cardInfo.title === node.frontmatter.title ? 'highlightDate' : ''}`}>\r\n              {node.frontmatter.date}\r\n            </div>\r\n          </article>\r\n        )\r\n      })}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        image\r\n        social {\r\n          email\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 40)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMDD, YYYY\")\r\n            title\r\n            subtitle\r\n            background\r\n            category\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}